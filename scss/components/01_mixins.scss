//Using @include declare-font('FontName', 'font-filename', 400);
@mixin declare-font($font-family, $font-filename, $font-weight: normal, $font-style: normal){
    @font-face{
        font-family: '#{$font-family}';
        font-weight: $font-weight;
        font-style: $font-style;
        src: url('../fonts/#{$font-filename}.eot');
        src: url('../fonts/#{$font-filename}.eot?#iefix') format('embedded-opentype'),
        url('../fonts/#{$font-filename}.woff') format('woff'),
        url('../fonts/#{$font-filename}.ttf') format('truetype'),;
    }
}

/* html5
   ========================================================================== */
@mixin scale($scale){
    -webkit-transform: scale($scale);
       -moz-transform: scale($scale);
        -ms-transform: scale($scale);
            transform: scale($scale);
}
@mixin translate($x, $y){
    -webkit-transform: translate($x, $y);
       -moz-transform: translate($x, $y);
        -ms-transform: translate($x, $y);
            transform: translate($x, $y);
}
/* @include rotate( 180 ); */
@mixin rotate($degrees){
    zoom: 1;
    -webkit-transform: rotate(#{$degrees}deg);
       -moz-transform: rotate(#{$degrees}deg);
        -ms-transform: rotate(#{$degrees}deg);
            transform: rotate(#{$degrees}deg);
    -ms-filter: 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod=\'auto expand\', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})';
    filter: progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
}
// @include border-radius(5px);
@mixin border-radius($radius){
    -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
            border-radius: $radius;
}
@mixin transition($transition-property, $transition-time, $method){
    -webkit-transition: $transition-property $transition-time $method;
       -moz-transition: $transition-property $transition-time $method;
        -ms-transition: $transition-property $transition-time $method;
            transition: $transition-property $transition-time $method;
}


/*  https://github.com/pfist/quantum-shadows
    @include shadow(2);
   ========================================================================== */
@mixin shadow($depth) {
  @if $depth == 1 {
    box-shadow: 0 1.5px 3px rgba(black, 0.24),
                0 3px 8px rgba(black, 0.05);
  }
  @if $depth == 2 {
    box-shadow: 0 4px 7px rgba(black, 0.23),
                0 8px 25px rgba(black, 0.05);
  }
  @if $depth == 3 {
    box-shadow: 0 7px 10px rgba(black, 0.30),
                0 10px 50px rgba(black, 0.12);
  }
  @if $depth == 4 {
    box-shadow: 0 10px 15px rgba(black, 0.28),
                0 15px 60px rgba(black, 0.18);
  }
  @if $depth == 5 {
    box-shadow: 0 16px 20px rgba(black, 0.29),
                0 20px 65px rgba(black, 0.18);
  }
}


// .selector {
//   @include x-placeholder {
//   }
// }
@mixin placeholder{
    &::-webkit-input-placeholder{
        @content;
    }
    &::-moz-placeholder{
        @content ;
        opacity: 1;
    }
    &:-ms-input-placeholder{
        @content ;
    }
}

/* @include center(true, false); */
@mixin center($horizontal: true, $vertical: true){
    position: absolute;
    @if ($horizontal and $vertical){
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
                transform: translate(-50%, -50%);
    } @else if ($horizontal){
        left: 50%;
        -webkit-transform: translate(-50%, 0);
                transform: translate(-50%, 0);
    } @else if ($vertical){
        top: 50%;
        -webkit-transform: translate(0, -50%);
                transform: translate(0, -50%);
    }
}

/* ==========================================================================
   HAMBURGER
   ========================================================================== */
// Vendor prefixes
$b_vendor: true !default;
// Burger
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
    $burger-height: $height;
    $burger-gutter: $gutter ;
    position: relative;
    margin-top: $height + $gutter;
    margin-bottom: $height + $gutter;
    @if $b_vendor {
        -webkit-user-select: none;
        -moz-user-select: none;
    }
    user-select: none;
    &, &::before, &::after {
        display: block;
        width: $width;
        height: $height;
        background-color: $color;
        @if $border-radius != 0 {
            border-radius: $border-radius;
        }
& {
    display: inline-block;
}
        @if $b_vendor {
            -webkit-transition-property: background-color, -webkit-transform;
            -moz-transition-property: background-color, -moz-transform;
        }
        transition-property: background-color, transform;
        @if $b_vendor {
            -webkit-transition-duration: $transition-duration;
            -moz-transition-duration: $transition-duration;
        }
        transition-duration: $transition-duration;
    }
    &::before, &::after {
        position: absolute;
        content: "";
    }
    &::before {
        top: -($height + $gutter);
    }
    &::after {
        top: $height + $gutter;
    }
}
// Select parts of the burger
@mixin burger-parts {
    &, &::before, &::after {
        @content;
    }
}
@mixin burger-top {
    &::before {
        @content;
    }
}
@mixin burger-middle {
    & {
        @content;
    }
}
@mixin burger-bottom {
    &::after {
        @content;
    }
}
// Burger animations
@mixin burger-to-cross {
    & {
        background-color: transparent;
    }
    &::before {
        @if $b_vendor {
            -webkit-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -moz-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
        }
        transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    }
    &::after {
        @if $b_vendor {
            -webkit-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -moz-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
        }
        transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    }
}
